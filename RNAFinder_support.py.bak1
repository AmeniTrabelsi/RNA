#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Jun 20, 2017 02:13:16 PM
#    Jun 20, 2017 02:33:39 PM
#    Jun 20, 2017 02:35:12 PM
#    Jun 20, 2017 03:11:04 PM
#    Jun 21, 2017 10:27:54 AM
#    Jun 22, 2017 03:29:55 PM
#    Jun 22, 2017 03:35:24 PM
#    Jun 26, 2017 08:50:42 AM
#    Jul 05, 2017 01:58:10 PM
#    Jul 24, 2017 02:08:05 PM
#    Jul 24, 2017 02:23:28 PM
#    Jul 24, 2017 02:26:28 PM
#    Jul 24, 2017 02:30:11 PM
#    Jul 24, 2017 02:35:19 PM
#    Jul 24, 2017 04:08:20 PM


import sys
from tkinter import filedialog
import pymzml
import copy
import pymysql as mdb
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import tkinter as tk

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global msmode_selection
    msmode_selection = IntVar()
    msmode_selection.set(1)
    global enzyme_selection
    enzyme_selection = IntVar()
    enzyme_selection.set(1)
    global T1_enzyme
    T1_enzyme = enzyme_selection
    global A_enzyme
    A_enzyme = enzyme_selection
    global rdo_negmode
    rdo_negmode = msmode_selection
    global rdo_posmode
    rdo_posmode = msmode_selection
    global Archaeal
    Archaeal = IntVar()
    global Bacterial
    Bacterial = IntVar()
    global Eukaryotic
    Eukaryotic = IntVar()
    global alltrnas
    alltrnas = IntVar()
    global Hplus
    Hplus = IntVar()
    global plus
    plus = IntVar()
    global Naplus
    Naplus = IntVar()
    global NH4plus
    NH4plus = IntVar()
    global Kplus
    Kplus = IntVar()
    global H2OplusHplus
    H2OplusHplus = IntVar()
    global C2H4Nplus
    C2H4Nplus = IntVar()
    global C2H3N1Naplus
    C2H3N1Naplus = IntVar()
    global Ptplus
    Ptplus = IntVar()
    global Hminus
    Hminus = IntVar()
    global minus
    minus = IntVar()
    global Clminus
    Clminus = IntVar()
    global minusH2OHminus
    minusH2OHminus = IntVar()
    global H2Naminus
    H2Naminus = IntVar()
    global wion
    wion = IntVar()
    global xion
    xion = IntVar()
    global yion
    yion = IntVar()
    global zion
    zion = IntVar()
    global aion
    aion = IntVar()
    global bion
    bion = IntVar()
    global cion
    cion = IntVar()
    global aBion
    aBion = IntVar()
    global dion
    dion = IntVar()

def allrnaselection():
    global alltrnas, Archaeal, Bacterial, Eukaryotic
    if alltrnas.get() == 1:
        Archaeal.set(1)
        Bacterial.set(1)
        Eukaryotic.set(1)
    else:
        Archaeal.set(0)
        Bacterial.set(0)
        Eukaryotic.set(0)
    sys.stdout.flush()



def adductselection():
    global w, msmode_selection
    if msmode_selection.get() == 1:
        w.Checkbutton5.configure(state='normal')
        w.Checkbutton6.configure(state='normal')
        w.Checkbutton7.configure(state='normal')
        w.Checkbutton8.configure(state='normal')
        w.Checkbutton9.configure(state='normal')
        w.Checkbutton10.configure(state='normal')
        w.Checkbutton11.configure(state='normal')
        w.Checkbutton12.configure(state='normal')
        w.Checkbutton13.configure(state='normal')
        w.Checkbutton26.configure(state='disabled')
        w.Checkbutton27.configure(state='disabled')
        w.Checkbutton28.configure(state='disabled')
        w.Checkbutton29.configure(state='disabled')
        w.Checkbutton30.configure(state='disabled')
    else:
        w.Checkbutton5.configure(state='disabled')
        w.Checkbutton6.configure(state='disabled')
        w.Checkbutton7.configure(state='disabled')
        w.Checkbutton8.configure(state='disabled')
        w.Checkbutton9.configure(state='disabled')
        w.Checkbutton10.configure(state='disabled')
        w.Checkbutton11.configure(state='disabled')
        w.Checkbutton12.configure(state='disabled')
        w.Checkbutton13.configure(state='disabled')
        w.Checkbutton26.configure(state='normal')
        w.Checkbutton27.configure(state='normal')
        w.Checkbutton28.configure(state='normal')
        w.Checkbutton29.configure(state='normal')
        w.Checkbutton30.configure(state='normal')
    sys.stdout.flush()

def uploadfiles():
    global w
    # w.Scrolledlistbox1.config(selectmode='extended')
    selected_files = filedialog.askopenfilenames()
    # self.file_count.set('{} file(s)'.format(len(self.selected_files)))
    for l in selected_files:
        w.Scrolledlistbox1.insert('end', l)
    sys.stdout.flush()


def Read_mzMLfile():
    global w
    filename = [w.Scrolledlistbox1.get(idx) for idx in w.Scrolledlistbox1.curselection()]
    result = pymzml.run.Reader(filename[0], extraAccessions=[('MS:1000827', ['value'])])
    data_all = []
    msmsSpectra = {'sn': [], 'rt': [], 'parent_mz': [], 'parent_sn': [], 'parent_rt': [], 'Spectra': []}
    for idx, spec in enumerate(result):
        if 'scan start time' in spec:
            temp_rt = spec['scan start time']
            temp_mslevel = int(spec['ms level'])
            temp_scan = int(spec.xmlTreeIterFree.attrib['id'].split(' ')[-1].split('=')[-1])
            temp_spec = []
            for mz, i in spec.peaks:
                temp_spec.append([mz, i])
            data_all.append([temp_mslevel, temp_scan, temp_rt, temp_spec])
            if temp_mslevel == 2:
                msmsSpectra['sn'].append(temp_scan)
                msmsSpectra['rt'].append(temp_rt)
                msmsSpectra['parent_mz'].append(spec['isolation window target m/z'])
                msmsSpectra['parent_sn'].append(count1)
                msmsSpectra['parent_rt'].append(data_all[count1 - 1][2])
                msmsSpectra['Spectra'].append(temp_spec)
            else:
                count1 = copy.copy(temp_scan)
    Total_int = []
    RT_all = []
    for c in data_all:
        RT_all.append(c[2])
        Total_int.append(sum(i[-1] for i in c[3]))

    f = plt.figure()
    plt.plot(RT_all, Total_int)
    plt.xlabel('Retention time (min)')
    plt.ylabel('Intensity')
    plt.title('Total Ion Current')
    canvas = FigureCanvasTkAgg(f, w.Canvas1)
    canvas.show()
    canvas.get_tk_widget().pack(side='bottom', fill='both', expand=True)
    sys.stdout.flush()
    sys.stdout.flush()


def processdata():
    global w, msmode_selection, Archaeal, Bacterial, Eukaryotic, alltrnas, Hplus, plus, Naplus, NH4plus, Kplus, H2OplusHplus, C2H4Nplus, C2H3N1Naplus, Ptplus, Hminus, minus, Clminus, minusH2OHminus, H2Naminus, wion, xion, yion, zion, aion, bion, cion, dion, aBion
    con = mdb.connect("localhost", "xiaoli", "shumaker344", "RNAdb")
    adduct_ions = {'H+': [1.00727645207, 'Positive'],
                   '+': [-0.00054858, 'Positive'],
                   'Na+': [22.9892207009, 'Positive'],
                   'NH4+': [18.03382555308, 'Positive'],
                   'K+': [38.9631581, 'Positive'],
                   '-H2O+H+': [-17.00328823163, 'Positive'],
                   'C2H4N+': [42.03382555308, 'Positive'],
                   'C2H3NNa+': [64.01576980191, 'Positive'],
                   'Pt(NH3)0(2+)': [189.95883484, 'Positive'],
                   'Pt(NH3)1(2+)': [206.98538394101, 'Positive'],
                   'Pt(NH3)2(2+)': [224.01193304202, 'Positive'],
                   'H-': [-1.00727645207, 'Negative'],
                   '-': [0.00054858, 'Negative'],
                   'Cl-': [34.96940126, 'Negative'],
                   '-H2O-H-': [-19.01784113577, 'Negative'],
                   '-2H+Na-': [20.97466779676, 'Negative']}  # 0 to 10 are positive mode, 11 to 15 are negative mode
    filename = [w.Scrolledlistbox1.get(idx) for idx in w.Scrolledlistbox1.curselection()]
    result = pymzml.run.Reader(filename[0], extraAccessions=[('MS:1000827', ['value'])])
    data_all = []
    msmsSpectra = {'sn': [], 'rt': [], 'parent_mz': [], 'parent_sn': [], 'parent_rt': [], 'Spectra': []}
    fullmsSpectra = {'sn': [], 'rt': [], 'Spectra': []}
    for idx, spec in enumerate(result):
        if 'scan start time' in spec:
            temp_rt = spec['scan start time']
            temp_mslevel = int(spec['ms level'])
            temp_scan = int(spec.xmlTreeIterFree.attrib['id'].split(' ')[-1].split('=')[-1])
            temp_spec = []
            for mz, i in spec.peaks:
                temp_spec.append([mz, i])
            data_all.append([temp_mslevel, temp_scan, temp_rt, temp_spec])
            if temp_mslevel == 2:
                msmsSpectra['sn'].append(temp_scan)
                msmsSpectra['rt'].append(temp_rt)
                msmsSpectra['parent_mz'].append(spec['isolation window target m/z'])
                msmsSpectra['parent_sn'].append(count1)
                msmsSpectra['parent_rt'].append(data_all[count1 - 1][2])
                msmsSpectra['Spectra'].append(temp_spec)
            else:
                count1 = copy.copy(temp_scan)
                fullmsSpectra['sn'].append(temp_scan)
                fullmsSpectra['rt'].append(temp_rt)
                fullmsSpectra['Spectra'].append(temp_spec)
    adduct_set = []
    dababase_set = []
    fragion_set = []
    if msmode_selection.get() == 1:
        if Hplus.get() == 1:
            adduct_set.append('H+')
        if plus.get() == 1:
            adduct_set.append('+')
        if Naplus.get() == 1:
            adduct_set.append('Na+')
        if NH4plus.get() == 1:
            adduct_set.append('NH4+')
        if Kplus.get() == 1:
            adduct_set.append('K+')
        if H2OplusHplus.get() == 1:
            adduct_set.append('-H2O+H+')
        if C2H4Nplus.get() == 1:
            adduct_set.append('C2H4N+')
        if C2H3N1Naplus.get() == 1:
            adduct_set.append('C2H3NNa+')
        if Ptplus.get() == 1:
            adduct_set.append(['Pt(NH3)0(2+)', 'Pt(NH3)1(2+)', 'Pt(NH3)2(2+)'])
    else:
        if Hminus.get() == 1:
            adduct_set.append('H-')
        if minus.get() == 1:
            adduct_set.append('-')
        if Clminus.get() == 1:
            adduct_set.append('Cl-')
        if minusH2OHminus.get() == 1:
            adduct_set.append('-H2O-H-')
        if H2Naminus.get() == 1:
            adduct_set.append('-2H+Na-')

    if alltrnas.get() == 1:
        dababase_set.append('all-trnas.fa')
    else:
        if Bacterial.get() == 1:
            dababase_set.append('bacterial-trnas.fa')
        if Eukaryotic.get() == 1:
            dababase_set.append('eukaryotic-trnas.fa')
        if Archaeal.get() == 1:
            dababase_set.append('archaeal-trnas.fa')
    if wion.get() == 1:
        fragion_set.append('w')
    if xion.get() == 1:
        fragion_set.append('x')
    if yion.get() == 1:
        fragion_set.append('y')
    if zion.get() == 1:
        fragion_set.append('z')
    if aion.get() == 1:
        fragion_set.append('a')
    if bion.get() == 1:
        fragion_set.append('b')
    if cion.get() == 1:
        fragion_set.append('c')
    if dion.get() == 1:
        fragion_set.append('d')
    if aBion.get() == 1:
        fragion_set.append('a-B')

    parent_mz = msmsSpectra['parent_mz']
    for idx, mz in enumerate(parent_mz):
        temp_sn = msmsSpectra['parent_sn'][idx]
        temp_msspec = fullmsSpectra['Spectra'][fullmsSpectra['sn'].index(temp_sn)]
        temp_mz = [x[0] for x in temp_msspec]
        # temp_int = [x[-1] for x in temp_msspec]
        temp_idx = min(enumerate(temp_mz), key=lambda x: abs(x[1] - mz))
        diff_mz1 = temp_idx[1] - temp_mz[temp_idx[0] - 1]
        diff_mz2 = temp_mz[temp_idx[0] + 1] - temp_idx[1]
        if (diff_mz1 >= 0.9 and diff_mz1 < 1.1) or (diff_mz2 >= 0.9 and diff_mz2 < 1.1):
            charge = 1
        elif (diff_mz1 < 0.6 and diff_mz1 >= 0.5) or (diff_mz2 < 0.6 and diff_mz2 >= 0.5):
            charge = 2
        elif (diff_mz1 < 0.4 and diff_mz1 >= 0.3) or (diff_mz2 < 0.4 and diff_mz2 >= 0.3):
            charge = 3
        else:
            charge = 1
        for add_ion in adduct_set:
            temp_mw = temp_idx[1]*charge + charge*adduct_ions[add_ion][0]
            with con:
                cur = con.cursor()
                lower_bound = temp_mw * (1 - 5*10**-6)
                uper_bound = temp_mw * (1 + 5*10**-6)
                # query to get mz vs #sequence
                cur.execute("select * from uni_two_oligos where MW >= {0} and MW <= {1}".format(lower_bound, uper_bound))
                temp_info = cur.fetchall()
            for idx, line in enumerate(temp_info):
                oligo_id = line[0]
                oligo_seq = line[1]
                oligo_type = line[2]
                No_letter = line[3:]

    sys.stdout.flush()


def xxx(p1):
    pass

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    # w.Entry1.config(text="3")
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import RNAFinder
    RNAFinder.vp_start_gui()












































